define(["require", "exports", "./Map2D"], function (require, exports, Map2D_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Direction;
    (function (Direction) {
        Direction[Direction["TOP"] = 2] = "TOP";
        Direction[Direction["BOTTOM"] = 3] = "BOTTOM";
        Direction[Direction["LEFT"] = 4] = "LEFT";
        Direction[Direction["RIGHT"] = 5] = "RIGHT";
    })(Direction = exports.Direction || (exports.Direction = {}));
    var TemplateRoom = /** @class */ (function () {
        function TemplateRoom(data) {
            this.tiles = new Map2D_1.Map2D();
            this.doorways = [];
            this.doorways[Direction.TOP] = -1;
            this.doorways[Direction.BOTTOM] = -1;
            this.doorways[Direction.LEFT] = -1;
            this.doorways[Direction.RIGHT] = -1;
            this.width = data[0].length;
            this.height = data.length;
            for (var i = 0; i < this.width; i++) {
                for (var j = 0; j < this.height; j++) {
                    this.tiles.set(i, j, data[j][i]);
                }
            }
            for (var i = 0; i < this.width; i++) {
                if (this.tiles.get(i, 0) === 0) {
                    this.doorways[Direction.TOP] = i;
                    this.tiles.set(i, 0, Direction.TOP);
                }
                if (this.tiles.get(i, this.height - 1) === 0) {
                    this.doorways[Direction.BOTTOM] = i;
                    this.tiles.set(i, this.height - 1, Direction.BOTTOM);
                }
            }
            for (var i = 0; i < this.height; i++) {
                if (this.tiles.get(0, i) === 0) {
                    this.doorways[Direction.LEFT] = i;
                    this.tiles.set(0, i, Direction.LEFT);
                }
                if (this.tiles.get(this.width - 1, i) === 0) {
                    this.doorways[Direction.RIGHT] = i;
                    this.tiles.set(this.width - 1, i, Direction.RIGHT);
                }
            }
        }
        TemplateRoom.prototype.toString = function () {
            var repr = "";
            for (var j = 0; j < this.height; j++) {
                for (var i = 0; i < this.width; i++) {
                    switch (this.tiles.get(i, j)) {
                        case 1:
                            repr += "██";
                            break;
                        case 2:
                            repr += "^^";
                            break;
                        case 3:
                            repr += "vv";
                            break;
                        case 4:
                            repr += "<<";
                            break;
                        case 5:
                            repr += ">>";
                            break;
                        default: repr += "  ";
                    }
                }
                repr += "\n";
            }
            return repr;
        };
        return TemplateRoom;
    }());
    exports.TemplateRoom = TemplateRoom;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVtcGxhdGVSb29tLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL1RlbXBsYXRlUm9vbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7SUFFQSxJQUFZLFNBS1g7SUFMRCxXQUFZLFNBQVM7UUFDakIsdUNBQU8sQ0FBQTtRQUNQLDZDQUFVLENBQUE7UUFDVix5Q0FBUSxDQUFBO1FBQ1IsMkNBQVMsQ0FBQTtJQUNiLENBQUMsRUFMVyxTQUFTLEdBQVQsaUJBQVMsS0FBVCxpQkFBUyxRQUtwQjtJQUVEO1FBUUksc0JBQVksSUFBZ0I7WUFKckIsVUFBSyxHQUFHLElBQUksYUFBSyxFQUFVLENBQUM7WUFFNUIsYUFBUSxHQUFhLEVBQUUsQ0FBQztZQUczQixJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBVSxDQUFDLENBQUMsQ0FBQztZQUN6QyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBTyxDQUFDLENBQUMsQ0FBQztZQUN6QyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBUyxDQUFDLENBQUMsQ0FBQztZQUN6QyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBUSxDQUFDLENBQUMsQ0FBQztZQUN6QyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7WUFDNUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQzFCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUcsRUFBRSxDQUFDO2dCQUNuQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFH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QUksSUFBSSxDQUFDOzRCQUFDLEtBQUssQ0FBQzt3QkFDNUIsS0FBSyxDQUFDOzRCQUFFLElBQUksSUFBSSxJQUFJLENBQUM7NEJBQUMsS0FBSyxDQUFDO3dCQUM1QixLQUFLLENBQUM7NEJBQUUsSUFBSSxJQUFJLElBQUksQ0FBQzs0QkFBQyxLQUFLLENBQUM7d0JBQzVCLEtBQUssQ0FBQzs0QkFBRSxJQUFJLElBQUksSUFBSSxDQUFDOzRCQUFDLEtBQUssQ0FBQzt3QkFDNUIsS0FBSyxDQUFDOzRCQUFFLElBQUksSUFBSSxJQUFJLENBQUM7NEJBQUMsS0FBSyxDQUFDO3dCQUM1QixTQUFTLElBQUksSUFBSSxJQUFJLENBQUM7b0JBQzFCLENBQUM7Z0JBQ0wsQ0FBQztnQkFDRCxJQUFJLElBQUksSUFBSSxDQUFDO1lBQ2pCLENBQUM7WUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2hCLENBQUM7UUFDTCxtQkFBQztJQUFELENBQUMsQUE1REQsSUE0REM7SUE1RFksb0NBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNYXAyRCB9IGZyb20gXCIuL01hcDJEXCI7XHJcblxyXG5leHBvcnQgZW51bSBEaXJlY3Rpb24ge1xyXG4gICAgVE9QID0gMixcclxuICAgIEJPVFRPTSA9IDMsXHJcbiAgICBMRUZUID0gNCxcclxuICAgIFJJR0hUID0gNSxcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFRlbXBsYXRlUm9vbSB7XHJcbiAgICBcclxuICAgIHB1YmxpYyB3aWR0aDogbnVtYmVyO1xyXG4gICAgcHVibGljIGhlaWdodDogbnVtYmVyO1xyXG4gICAgcHVibGljIHRpbGVzID0gbmV3IE1hcDJEPG51bWJlcj4oKTtcclxuXHJcbiAgICBwdWJsaWMgZG9vcndheXM6IG51bWJlcltdID0gW107XHJcblxyXG4gICAgY29uc3RydWN0b3IoZGF0YTogbnVtYmVyW11bXSkge1xyXG4gICAgICAgIHRoaXMuZG9vcndheXNbRGlyZWN0aW9uLlRPUF0gICAgICAgID0gLTE7XHJcbiAgICAgICAgdGhpcy5kb29yd2F5c1tEaXJlY3Rpb24uQk9UVE9NXSAgICAgPSAtMTtcclxuICAgICAgICB0aGlzLmRvb3J3YXlzW0RpcmVjdGlvbi5MRUZUXSAgICAgICA9IC0xO1xyXG4gICAgICAgIHRoaXMuZG9vcndheXNbRGlyZWN0aW9uLlJJR0hUXSAgICAgID0gLTE7XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IGRhdGFbMF0ubGVuZ3RoO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gZGF0YS5sZW5ndGg7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLndpZHRoOyBpICsrKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5oZWlnaHQ7IGogKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGlsZXMuc2V0KGksIGosIGRhdGFbal1baV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMud2lkdGg7IGkgKyspIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudGlsZXMuZ2V0KGksIDApID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRvb3J3YXlzW0RpcmVjdGlvbi5UT1BdID0gaTtcclxuICAgICAgICAgICAgICAgIHRoaXMudGlsZXMuc2V0KGksIDAsIERpcmVjdGlvbi5UT1ApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRpbGVzLmdldChpLCB0aGlzLmhlaWdodCAtIDEpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRvb3J3YXlzW0RpcmVjdGlvbi5CT1RUT01dID0gaTtcclxuICAgICAgICAgICAgICAgIHRoaXMudGlsZXMuc2V0KGksIHRoaXMuaGVpZ2h0IC0gMSwgRGlyZWN0aW9uLkJPVFRPTSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmhlaWdodDsgaSArKykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy50aWxlcy5nZXQoMCwgaSkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZG9vcndheXNbRGlyZWN0aW9uLkxFRlRdID0gaTtcclxuICAgICAgICAgICAgICAgIHRoaXMudGlsZXMuc2V0KDAsIGksIERpcmVjdGlvbi5MRUZUKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy50aWxlcy5nZXQodGhpcy53aWR0aCAtIDEsIGkpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRvb3J3YXlzW0RpcmVjdGlvbi5SSUdIVF0gPSBpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50aWxlcy5zZXQodGhpcy53aWR0aCAtIDEsIGksIERpcmVjdGlvbi5SSUdIVCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHRvU3RyaW5nKCkge1xyXG4gICAgICAgIGxldCByZXByID0gXCJcIjtcclxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuaGVpZ2h0OyBqICsrKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy53aWR0aDsgaSArKykge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLnRpbGVzLmdldChpLCBqKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTogcmVwciArPSBcIuKWiOKWiFwiOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHJlcHIgKz0gXCJeXlwiOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6IHJlcHIgKz0gXCJ2dlwiOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6IHJlcHIgKz0gXCI8PFwiOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6IHJlcHIgKz0gXCI+PlwiOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiByZXByICs9IFwiICBcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXByICs9IFwiXFxuXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXByO1xyXG4gICAgfVxyXG59Il19