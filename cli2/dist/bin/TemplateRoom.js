define(["require", "exports", "./Map2D"], function (require, exports, Map2D_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Direction;
    (function (Direction) {
        Direction[Direction["TOP"] = 2] = "TOP";
        Direction[Direction["BOTTOM"] = 3] = "BOTTOM";
        Direction[Direction["LEFT"] = 4] = "LEFT";
        Direction[Direction["RIGHT"] = 5] = "RIGHT";
    })(Direction = exports.Direction || (exports.Direction = {}));
    var TemplateRoom = /** @class */ (function () {
        function TemplateRoom(data) {
            this.tiles = new Map2D_1.Map2D();
            this.doorways = [-1, -1, -1, -1];
            this.width = data[0].length;
            this.height = data.length;
            for (var i = 0; i < this.width; i++) {
                for (var j = 0; j < this.height; j++) {
                    this.tiles.set(i, j, data[j][i]);
                }
            }
            for (var i = 0; i < this.width; i++) {
                if (this.tiles.get(i, 0) === 0) {
                    this.doorways[Direction.TOP - Direction.TOP] = i;
                    this.tiles.set(i, 0, Direction.TOP);
                }
                if (this.tiles.get(i, this.height - 1) === 0) {
                    this.doorways[Direction.BOTTOM - Direction.TOP] = i;
                    this.tiles.set(i, this.height - 1, Direction.BOTTOM);
                }
            }
            for (var i = 0; i < this.height; i++) {
                if (this.tiles.get(0, i) === 0) {
                    this.doorways[Direction.LEFT - Direction.TOP] = i;
                    this.tiles.set(0, i, Direction.LEFT);
                }
                if (this.tiles.get(this.width - 1, i) === 0) {
                    this.doorways[Direction.RIGHT - Direction.TOP] = i;
                    this.tiles.set(this.width - 1, i, Direction.RIGHT);
                }
            }
        }
        TemplateRoom.prototype.toString = function () {
            var repr = "";
            for (var j = 0; j < this.height; j++) {
                for (var i = 0; i < this.width; i++) {
                    switch (this.tiles.get(i, j)) {
                        case 1:
                            repr += "██";
                            break;
                        case 2:
                            repr += "^^";
                            break;
                        case 3:
                            repr += "vv";
                            break;
                        case 4:
                            repr += "<<";
                            break;
                        case 5:
                            repr += ">>";
                            break;
                        default: repr += "  ";
                    }
                }
                repr += "\n";
            }
            return repr;
        };
        return TemplateRoom;
    }());
    exports.TemplateRoom = TemplateRoom;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVtcGxhdGVSb29tLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL1RlbXBsYXRlUm9vbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7SUFFQSxJQUFZLFNBS1g7SUFMRCxXQUFZLFNBQVM7UUFDakIsdUNBQU8sQ0FBQTtRQUNQLDZDQUFVLENBQUE7UUFDVix5Q0FBUSxDQUFBO1FBQ1IsMkNBQVMsQ0FBQTtJQUNiLENBQUMsRUFMVyxTQUFTLEdBQVQsaUJBQVMsS0FBVCxpQkFBUyxRQUtwQjtJQUVEO1FBUUksc0JBQVksSUFBZ0I7WUFKckIsVUFBSyxHQUFHLElBQUksYUFBSyxFQUFVLENBQUM7WUFFNUIsYUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUcvQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7WUFDNUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQzFCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUcsRUFBRSxDQUFDO2dCQUNuQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFHLEVBQUUsQ0FBQztvQkFDcEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDckMsQ0FBQztZQUNMLENBQUM7WUFFRCxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFHLEVBQUUsQ0FBQztnQkFDbkMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzdCLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUNqRCxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDeEMsQ0FBQztnQkFDRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUMzQyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDcEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDekQsQ0FBQztZQUNMLENBQUM7WUFDRCxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFHLEVBQUUsQ0FBQztnQkFDcEMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzdCLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUNsRCxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDekMsQ0FBQztnQkFDRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUMxQyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDbkQsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDdkQsQ0FBQztZQUNMLENBQUM7UUFDTCxDQUFDO1FBRU0sK0JBQVEsR0FBZjtZQUNJLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUcsRUFBRSxDQUFDO2dCQUNwQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFHLEVBQUUsQ0FBQztvQkFDbkMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDM0IsS0FBSyxDQUFDOzRCQUFFLElBQUksSUFBSSxJQUFJLENBQUM7NEJBQUMsS0FBSyxDQUFDO3dCQUM1QixLQUFLLENBQUM7NEJBQUUsSUFBSSxJQUFJLElBQUksQ0FBQzs0QkFBQyxLQUFLLENBQUM7d0JBQzVCLEtBQUssQ0FBQzs0QkFBRSxJQUFJLElBQUksSUFBSSxDQUFDOzRCQUFDLEtBQUssQ0FBQzt3QkFDNUIsS0FBSyxDQUFDOzRCQUFFLElBQUksSUFBSSxJQUFJLENBQUM7NEJBQUMsS0FBSyxDQUFDO3dCQUM1QixLQUFLLENBQUM7NEJBQUUsSUFBSSxJQUFJLElBQUksQ0FBQzs0QkFBQyxLQUFLLENBQUM7d0JBQzVCLFNBQVMsSUFBSSxJQUFJLElBQUksQ0FBQztvQkFDMUIsQ0FBQztnQkFDTCxDQUFDO2dCQUNELElBQUksSUFBSSxJQUFJLENBQUM7WUFDakIsQ0FBQztZQUNELE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDaEIsQ0FBQztRQUNMLG1CQUFDO0lBQUQsQ0FBQyxBQXhERCxJQXdEQztJQXhEWSxvQ0FBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hcDJEIH0gZnJvbSBcIi4vTWFwMkRcIjtcclxuXHJcbmV4cG9ydCBlbnVtIERpcmVjdGlvbiB7XHJcbiAgICBUT1AgPSAyLFxyXG4gICAgQk9UVE9NID0gMyxcclxuICAgIExFRlQgPSA0LFxyXG4gICAgUklHSFQgPSA1LFxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVGVtcGxhdGVSb29tIHtcclxuICAgIFxyXG4gICAgcHVibGljIHdpZHRoOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgaGVpZ2h0OiBudW1iZXI7XHJcbiAgICBwdWJsaWMgdGlsZXMgPSBuZXcgTWFwMkQ8bnVtYmVyPigpO1xyXG5cclxuICAgIHB1YmxpYyBkb29yd2F5cyA9IFstMSwgLTEsIC0xLCAtMV07XHJcblxyXG4gICAgY29uc3RydWN0b3IoZGF0YTogbnVtYmVyW11bXSkge1xyXG4gICAgICAgIHRoaXMud2lkdGggPSBkYXRhWzBdLmxlbmd0aDtcclxuICAgICAgICB0aGlzLmhlaWdodCA9IGRhdGEubGVuZ3RoO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy53aWR0aDsgaSArKykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuaGVpZ2h0OyBqICsrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRpbGVzLnNldChpLCBqLCBkYXRhW2pdW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLndpZHRoOyBpICsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRpbGVzLmdldChpLCAwKSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kb29yd2F5c1tEaXJlY3Rpb24uVE9QIC0gRGlyZWN0aW9uLlRPUF0gPSBpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50aWxlcy5zZXQoaSwgMCwgRGlyZWN0aW9uLlRPUCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMudGlsZXMuZ2V0KGksIHRoaXMuaGVpZ2h0IC0gMSkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZG9vcndheXNbRGlyZWN0aW9uLkJPVFRPTSAtIERpcmVjdGlvbi5UT1BdID0gaTtcclxuICAgICAgICAgICAgICAgIHRoaXMudGlsZXMuc2V0KGksIHRoaXMuaGVpZ2h0IC0gMSwgRGlyZWN0aW9uLkJPVFRPTSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmhlaWdodDsgaSArKykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy50aWxlcy5nZXQoMCwgaSkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZG9vcndheXNbRGlyZWN0aW9uLkxFRlQgLSBEaXJlY3Rpb24uVE9QXSA9IGk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRpbGVzLnNldCgwLCBpLCBEaXJlY3Rpb24uTEVGVCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMudGlsZXMuZ2V0KHRoaXMud2lkdGggLSAxLCBpKSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kb29yd2F5c1tEaXJlY3Rpb24uUklHSFQgLSBEaXJlY3Rpb24uVE9QXSA9IGk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRpbGVzLnNldCh0aGlzLndpZHRoIC0gMSwgaSwgRGlyZWN0aW9uLlJJR0hUKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdG9TdHJpbmcoKSB7XHJcbiAgICAgICAgbGV0IHJlcHIgPSBcIlwiO1xyXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5oZWlnaHQ7IGogKyspIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLndpZHRoOyBpICsrKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMudGlsZXMuZ2V0KGksIGopKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOiByZXByICs9IFwi4paI4paIXCI7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogcmVwciArPSBcIl5eXCI7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmVwciArPSBcInZ2XCI7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmVwciArPSBcIjw8XCI7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTogcmVwciArPSBcIj4+XCI7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHJlcHIgKz0gXCIgIFwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlcHIgKz0gXCJcXG5cIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlcHI7XHJcbiAgICB9XHJcbn0iXX0=