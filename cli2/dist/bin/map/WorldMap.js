var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define(["require", "exports", "./DunGen", "../root"], function (require, exports, DunGen_1, root_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TILE_SIZE = 32;
    var EPSILON = 0.001;
    var WorldMap = /** @class */ (function (_super) {
        __extends(WorldMap, _super);
        function WorldMap(world, dungeon, provider) {
            var _this = _super.call(this) || this;
            _this.world = world;
            _this.dungeon = dungeon;
            _this.provider = provider;
            if (!provider.isReady())
                throw new Error("Provider is not ready");
            var tex = PIXI.RenderTexture.create(dungeon.width * exports.TILE_SIZE, dungeon.height * exports.TILE_SIZE);
            var container = new PIXI.Container();
            for (var i = 0; i < dungeon.width; i++) {
                for (var j = 0; j < dungeon.height; j++) {
                    var tile = provider.getTile(dungeon, i, j);
                    tile.x = i * exports.TILE_SIZE;
                    tile.y = j * exports.TILE_SIZE;
                    container.addChild(tile);
                    // tile.destroy();
                }
            }
            root_1.root.app.renderer.render(container, tex);
            container.destroy();
            _this.addChild(new PIXI.Sprite(tex));
            return _this;
        }
        WorldMap.prototype.move = function (actor) {
            var collisions = [0, 0];
            var xv = actor.velocity.x;
            while (xv !== 0) {
                var move = Math.max(Math.min(exports.TILE_SIZE, xv), -exports.TILE_SIZE);
                actor.x += move;
                xv -= move;
                var left = Math.floor(actor.left / exports.TILE_SIZE);
                var right = Math.floor(actor.right / exports.TILE_SIZE);
                var top_1 = Math.floor(actor.top / exports.TILE_SIZE);
                var bottom = Math.floor(actor.bottom / exports.TILE_SIZE);
                for (var i = top_1; i <= bottom; i++) {
                    if (this.dungeon.tiles.get(left, i) === DunGen_1.ETiles.WALL || this.dungeon.tiles.get(right, i) === DunGen_1.ETiles.WALL) {
                        if (move > 0) {
                            actor.right = right * 32 - EPSILON;
                            collisions[0] = 1;
                        }
                        else {
                            actor.left = left * 32 + 32 + EPSILON;
                            collisions[0] = -1;
                        }
                        xv = 0;
                        actor.velocity.x = 0;
                        break;
                    }
                }
            }
            var yv = actor.velocity.y;
            while (yv !== 0) {
                var move = Math.max(Math.min(exports.TILE_SIZE, yv), -exports.TILE_SIZE);
                actor.y += move;
                yv -= move;
                var left = Math.floor(actor.left / exports.TILE_SIZE);
                var right = Math.floor(actor.right / exports.TILE_SIZE);
                var top_2 = Math.floor(actor.top / exports.TILE_SIZE);
                var bottom = Math.floor(actor.bottom / exports.TILE_SIZE);
                for (var i = left; i <= right; i++) {
                    if (this.dungeon.tiles.get(i, top_2) === DunGen_1.ETiles.WALL || this.dungeon.tiles.get(i, bottom) === DunGen_1.ETiles.WALL) {
                        if (move > 0) {
                            actor.bottom = bottom * 32 - EPSILON;
                            collisions[1] = 1;
                        }
                        else {
                            actor.top = top_2 * 32 + 32 + EPSILON;
                            collisions[1] = -1;
                        }
                        yv = 0;
                        actor.velocity.y = 0;
                        break;
                    }
                }
            }
            return collisions;
        };
        WorldMap.prototype.isOnLadder = function (actor) {
            var center = Math.floor(actor.horizontalCenter / exports.TILE_SIZE);
            var top = Math.floor(actor.top / exports.TILE_SIZE);
            var bottom = Math.floor(actor.bottom / exports.TILE_SIZE);
            return (this.dungeon.tiles.get(center, top) === DunGen_1.ETiles.LADDER || this.dungeon.tiles.get(center, bottom) === DunGen_1.ETiles.LADDER);
        };
        return WorldMap;
    }(PIXI.Container));
    exports.WorldMap = WorldMap;
});
//# sourceMappingURL=data:application/json;base64,