var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
define(["require", "exports", "./Map2D", "./TemplateRoom"], function (require, exports, Map2D_1, TemplateRoom_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var defaults = {
        width: 50,
        height: 50,
    };
    var ETiles;
    (function (ETiles) {
        ETiles[ETiles["SOLID"] = -1] = "SOLID";
        ETiles[ETiles["EMPTY"] = 0] = "EMPTY";
        ETiles[ETiles["WALL"] = 1] = "WALL";
        ETiles[ETiles["TOP_DOOR"] = 2] = "TOP_DOOR";
        ETiles[ETiles["BOTTOM_DOOR"] = 3] = "BOTTOM_DOOR";
        ETiles[ETiles["LEFT_DOOR"] = 4] = "LEFT_DOOR";
        ETiles[ETiles["RIGHT_DOOR"] = 5] = "RIGHT_DOOR";
        ETiles[ETiles["LADDER"] = 6] = "LADDER";
    })(ETiles = exports.ETiles || (exports.ETiles = {}));
    function oppositeDirection(dir) {
        switch (dir) {
            case TemplateRoom_1.Direction.TOP: return TemplateRoom_1.Direction.BOTTOM;
            case TemplateRoom_1.Direction.BOTTOM: return TemplateRoom_1.Direction.TOP;
            case TemplateRoom_1.Direction.LEFT: return TemplateRoom_1.Direction.RIGHT;
            case TemplateRoom_1.Direction.RIGHT: return TemplateRoom_1.Direction.LEFT;
        }
    }
    var directions = [TemplateRoom_1.Direction.TOP, TemplateRoom_1.Direction.BOTTOM, TemplateRoom_1.Direction.LEFT, TemplateRoom_1.Direction.RIGHT];
    function addOpenDoor(x, y, room, direction, openDoors) {
        if (room.doorways[direction] < 0)
            return;
        if (direction === TemplateRoom_1.Direction.TOP) {
            openDoors.push({ direction: direction, x: x + room.doorways[direction], y: y });
        }
        else if (direction === TemplateRoom_1.Direction.BOTTOM) {
            openDoors.push({ direction: direction, x: x + room.doorways[direction], y: y + room.height - 1 });
        }
        else if (direction === TemplateRoom_1.Direction.LEFT) {
            openDoors.push({ direction: direction, x: x, y: y + room.doorways[direction] });
        }
        else if (direction === TemplateRoom_1.Direction.RIGHT) {
            openDoors.push({ direction: direction, x: x + room.width - 1, y: y + room.doorways[direction] });
        }
    }
    function addOpenDoors(x, y, room, openDoors, exculde) {
        if (exculde === void 0) { exculde = []; }
        try {
            for (var directions_1 = __values(directions), directions_1_1 = directions_1.next(); !directions_1_1.done; directions_1_1 = directions_1.next()) {
                var dir = directions_1_1.value;
                if (exculde.indexOf(dir) >= 0 || room.doorways[dir] < 0)
                    continue;
                addOpenDoor(x, y, room, dir, openDoors);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (directions_1_1 && !directions_1_1.done && (_a = directions_1.return)) _a.call(directions_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var e_1, _a;
    }
    function roomCanAttach(direction, candidateRoom) {
        return candidateRoom.doorways[oppositeDirection(direction)] >= 0;
    }
    function connectedRoomXY(door, room) {
        var connectingDoor = room.doorways[oppositeDirection(door.direction)];
        switch (door.direction) {
            case TemplateRoom_1.Direction.TOP: return { x: door.x - connectingDoor, y: door.y - room.height };
            case TemplateRoom_1.Direction.BOTTOM: return { x: door.x - connectingDoor, y: door.y + 1 };
            case TemplateRoom_1.Direction.LEFT: return { x: door.x - room.width, y: door.y - connectingDoor };
            case TemplateRoom_1.Direction.RIGHT: return { x: door.x + 1, y: door.y - connectingDoor };
            default: throw new Error("Invalid direction");
        }
    }
    function DunGen(templates, opts) {
        opts = opts || {};
        try {
            for (var _a = __values(Keys(defaults)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var key = _b.value;
                if (opts[key] === undefined)
                    opts[key] = defaults[key];
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_2) throw e_2.error; }
        }
        var dungeon = new Dungeon(opts.width, opts.height);
        var openDoors = [];
        templates = fyShuffle(templates);
        var root = templates[0];
        var x = Math.floor((dungeon.width - root.width) / 2);
        var y = Math.floor((dungeon.height - root.height) / 2);
        if (!dungeon.paint(root, x, y)) {
            return dungeon;
        }
        addOpenDoors(x, y, root, openDoors);
        while (openDoors.length) {
            openDoors = fyShuffle(openDoors);
            var door = openDoors.pop();
            templates = fyShuffle(templates);
            try {
                for (var templates_1 = __values(templates), templates_1_1 = templates_1.next(); !templates_1_1.done; templates_1_1 = templates_1.next()) {
                    var candidate = templates_1_1.value;
                    if (!roomCanAttach(door.direction, candidate))
                        continue;
                    var xy = connectedRoomXY(door, candidate);
                    if (dungeon.paint(candidate, xy.x, xy.y)) {
                        addOpenDoors(xy.x, xy.y, candidate, openDoors, [oppositeDirection(door.direction)]);
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (templates_1_1 && !templates_1_1.done && (_d = templates_1.return)) _d.call(templates_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        dungeon = dungeon.map(function (tile, x, y, dungeon) {
            if (tile === ETiles.SOLID || tile === ETiles.WALL) {
                if (y > 0 && y < dungeon.height - 1) {
                    var top_1 = dungeon.tiles.get(x, y - 1);
                    var bottom = dungeon.tiles.get(x, y + 1);
                    if (((top_1 === TemplateRoom_1.Direction.BOTTOM || top_1 === 0) && (bottom === TemplateRoom_1.Direction.TOP || bottom === 0))
                        && top_1 !== bottom) {
                        return TemplateRoom_1.Direction.BOTTOM;
                    }
                }
                if (x > 0 && x < dungeon.width - 1) {
                    var left = dungeon.tiles.get(x - 1, y);
                    var right = dungeon.tiles.get(x + 1, y);
                    if (((left === TemplateRoom_1.Direction.RIGHT || left === 0) && (right === TemplateRoom_1.Direction.LEFT || right === 0))
                        && left !== right) {
                        return 0;
                    }
                }
            }
            if (directions.indexOf(tile) < 0)
                return tile;
            if (x > 0 && x < dungeon.width - 1 && y > 0 && y < dungeon.height - 1) {
                var xy = { x: 0, y: 0 };
                switch (tile) {
                    case TemplateRoom_1.Direction.TOP:
                        xy.y = -1;
                        break;
                    case TemplateRoom_1.Direction.BOTTOM:
                        xy.y = 1;
                        break;
                    case TemplateRoom_1.Direction.LEFT:
                        xy.x = -1;
                        break;
                    case TemplateRoom_1.Direction.RIGHT:
                        xy.x = 1;
                        break;
                }
                if (dungeon.tiles.get(x + xy.x, y + xy.y) === oppositeDirection(tile)) {
                    return tile === TemplateRoom_1.Direction.BOTTOM ? TemplateRoom_1.Direction.BOTTOM : ETiles.EMPTY;
                }
                else {
                    if (x > 1 && x < dungeon.width - 2 && y > 1 && y < dungeon.height - 2) {
                        var reach = dungeon.tiles.get(x + xy.x * 2, y + xy.y * 2);
                        if (reach === ETiles.EMPTY || reach === oppositeDirection(tile)) {
                            return tile === TemplateRoom_1.Direction.BOTTOM ? TemplateRoom_1.Direction.BOTTOM : ETiles.EMPTY;
                        }
                    }
                }
            }
            return ETiles.WALL;
        });
        var ladderSeeds = [];
        for (var i = 0; i < dungeon.width - 1; i++) {
            for (var j = 0; j < dungeon.width - 1; j++) {
                if (dungeon.tiles.get(i, j) === ETiles.EMPTY && dungeon.tiles.get(i + 1, j) === ETiles.EMPTY) {
                    var bl = dungeon.tiles.get(i, j + 1);
                    var br = dungeon.tiles.get(i + 1, j + 1);
                    if (bl === 1 && br === TemplateRoom_1.Direction.BOTTOM) {
                        ladderSeeds.push({ x: i + 1, y: j + 1 });
                    }
                    else if (bl === TemplateRoom_1.Direction.BOTTOM && br === ETiles.WALL) {
                        ladderSeeds.push({ x: i, y: j + 1 });
                    }
                }
            }
        }
        ladderSeeds = fyShuffle(ladderSeeds);
        function eraseBottomDoor(x, y) {
            if (dungeon.tiles.get(x, y) === TemplateRoom_1.Direction.BOTTOM) {
                dungeon.tiles.set(x, y, ETiles.EMPTY);
                eraseBottomDoor(x - 1, y);
                eraseBottomDoor(x + 1, y);
            }
        }
        while (ladderSeeds.length > 0) {
            var seed = ladderSeeds.pop();
            if (dungeon.tiles.get(seed.x, seed.y) !== TemplateRoom_1.Direction.BOTTOM)
                continue;
            while (dungeon.tiles.get(seed.x, seed.y) !== ETiles.WALL) {
                if (dungeon.tiles.get(seed.x, seed.y) === TemplateRoom_1.Direction.BOTTOM) {
                    eraseBottomDoor(seed.x, seed.y);
                }
                dungeon.tiles.set(seed.x, seed.y, ETiles.LADDER);
                seed.y++;
            }
        }
        return dungeon.map(function (t) { return t === ETiles.SOLID ? ETiles.WALL : t; });
        var e_2, _c, e_3, _d;
    }
    exports.DunGen = DunGen;
    var Dungeon = /** @class */ (function () {
        function Dungeon(width, height, initializer) {
            if (initializer === void 0) { initializer = function () { return -1; }; }
            this.width = width;
            this.height = height;
            this.tiles = new Map2D_1.Map2D();
            for (var i = 0; i < width; i++) {
                for (var j = 0; j < height; j++) {
                    this.tiles.set(i, j, initializer(i, j));
                }
            }
        }
        Dungeon.prototype.paint = function (room, x, y) {
            if (x < 0 || y < 0 || x + room.width > this.width || y + room.height > this.height)
                return false;
            for (var i = 0; i < room.width; i++) {
                for (var j = 0; j < room.height; j++) {
                    var tile = this.tiles.get(x + i, y + j);
                    if (tile === undefined || tile !== ETiles.SOLID)
                        return false;
                }
            }
            for (var i = 0; i < room.width; i++) {
                for (var j = 0; j < room.height; j++) {
                    this.tiles.set(x + i, y + j, room.tiles.get(i, j));
                }
            }
            return true;
        };
        Dungeon.prototype.map = function (fn) {
            var _this = this;
            return new Dungeon(this.width, this.height, function (x, y) {
                return fn(_this.tiles.get(x, y), x, y, _this);
            });
        };
        return Dungeon;
    }());
    exports.Dungeon = Dungeon;
    function fyShuffle(arr) {
        arr = arr.slice();
        for (var i = arr.length - 1; i > 0; i--) {
            var swp = Math.floor(Math.random() * (i + 1));
            var temp = arr[i];
            arr[i] = arr[swp];
            arr[swp] = temp;
        }
        return arr;
    }
});
//# sourceMappingURL=data:application/json;base64,